<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chatting.dao.IFriendDao">
    <resultMap id="friendMap" type="com.chatting.model.Friend">
        <id property="id" column="id"/>
        <id property="uuid_second" column="uuid_second"/>
        <association property="user" column="uuid_second" select="com.chatting.dao.IUserDao.getUserByUuid"/>
    </resultMap>
    <select id="selectFriendByMyUuid" resultType="com.chatting.model.HistoryMessage">
        select substring_index(group_concat(username order by created_at desc), ',', 1)        as username,
               substring_index(group_concat(img_url order by created_at desc), ',', 1)         as img_url,
               substring_index(group_concat(message order by created_at desc), ',', 1)         as message,
               max(created_at)                                                                 as created_at,
               substring_index(group_concat(is_delivery order by created_at desc), ',', 1)     as is_delivery,
               substring_index(group_concat(uuid_from order by created_at desc), ',', 1)       as friend_uuid,
               substring_index(group_concat(chatting_log.id order by created_at desc), ',', 1) as id
        from user,
             friend
             left join chatting_log on friend.uuid_second = chatting_log.uuid_from and friend.uuid_first = chatting_log.uuid_to
        where friend.uuid_first = #{uuid}
          and friend.uuid_second = user.uuid
          and message is not null
        group by username
        order by created_at desc
    </select>
    <select id="getFriendByUuid" resultMap="friendMap">
       select id, uuid_first, uuid_second from friend where uuid_first = #{uuid};
    </select>
</mapper>